/* Title of Guidebook */
"GuideBook..title" = "Capturing Photos";

/* The title of the Welcome Message for the GuideBook */
"GuideBook..WelcomeMessageCapturing Photos..title" = "Capturing Photos";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..WelcomeMessageCapturing Photos..Paragraph0" = "Imagine the exciting things you could do with the camera in your own app! In this sample, you explore the building blocks of a camera app, and discover how you can use your SwiftUI skills to work with the camera and photo library.";

/* Title of step named Capturing Photos */
"GuideBook..Guide0..StepCapturing Photos..title" = "Capturing Photos";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..Paragraph1" = "![](intro-header.png)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..Paragraph2" = "Welcome to Capturing Photos!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..Paragraph3" = "Think of the essential things a camera app should do:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..UnorderedList0..Paragraph4" = "Display live video from the camera in a viewfinder";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..UnorderedList0..Paragraph5" = "Take a photo when you tap or click the shutter button";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..UnorderedList0..Paragraph6" = "Save your photo";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..UnorderedList0..Paragraph7" = "Browse and view the photos you’ve already taken";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..Paragraph8" = "You’ll find out how to do all of these — and more. You’ll learn about the data objects your app uses, and how to manage the flow of data between them and the app’s user interface.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..Paragraph9" = "Before you get started, select App Preview and take a moment to explore your camera app and take a few photos.";

/* title of the guide button */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..GuideButtonStart Walkthrough..title" = "Start Walkthrough";

/* accessibility description for guide button */
"GuideBook..Guide0..StepCapturing Photos..LearningCenterContent..GuideButtonStart Walkthrough..description" = "AX description for button";

/* Title for the section of tasks to complete */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..title" = "Previewing the Camera Output";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..Paragraph10" = "Your camera’s video output sends a continuous stream of individual images (video frames). You display these in a viewfinder so you can see exactly what the camera is looking at before composing your shot and taking a photo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..Paragraph11" = "Discover more about how this works. 🎞";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..title" = "Using the Camera";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Paragraph12" = "Learn about the camera in your data model.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page0..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page0..Paragraph13" = "Your data model has a `camera` property that represents one of the physical cameras — or capture devices — available to your device.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page1..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page1..Paragraph14" = "Your device may have access to several capture devices — for example, the front and back cameras on iPad — and you can switch between these using the camera’s `switchCaptureDevice()` method.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page1..Paragraph15" = "Learn more about capture devices in [Choosing a Capture Device](doc://com.apple.documentation/documentation/avfoundation/capture_setup/choosing_a_capture_device).";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page2..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page2..Paragraph16" = "To start using the camera, you call its `start()` method:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page2..CodeBlock0" = "await model.camera.start()
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page3..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page3..Paragraph17" = "Note that before you can use the device camera(s) in your own project, you must add the Camera capability.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskusingCamera..Page3..Paragraph18" = "Find out more more in [Requesting access to capabilities for your project](https://developer.apple.com/documentation/swift-playgrounds/project-capabilities).";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewStream..title" = "Exploring the Preview Stream";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewStream..Paragraph19" = "Learn about the stream of preview images from your camera.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewStream..Page4..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewStream..Page4..Paragraph20" = "After calling the camera’s `start()` method, its video output produces a stream of low-resolution preview images (video frames), at rates of up to 60 frames a second.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewStream..Page5..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewStream..Page5..Paragraph21" = "You receive these preview images through the camera’s `previewStream` property, as an [asynchronous stream](glossary://asynchronous%20stream) of [CIImage](doc://com.apple.documentation/documentation/coreimage/ciimage) (Core Image) objects.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..title" = "Processing the Preview Stream";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Paragraph22" = "Learn how to process the preview stream so that it’s ready to display in the viewfinder.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page6..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page6..Paragraph23" = "Your [data model](glossary://data%20model) has a dedicated [task](glossary://task) to handle the [stream](glossary://asynchronous%20stream) of preview images from the camera, using its `handleCameraPreviews` function.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page6..Paragraph24" = "You can learn more about [tasks](doc://com.apple.documentation/documentation/swift/task) in the Swift standard library.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page7..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page7..Paragraph25" = "In `handleCameraPreviews`, turn the preview stream of [CIImage](doc://com.apple.documentation/documentation/coreimage/ciimage) objects from the camera into a stream of [Image](doc://com.apple.documentation/documentation/swiftui/image) views, ready for display.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page8..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page8..Paragraph26" = "An [AsyncStream](doc://com.apple.documentation/documentation/swift/asyncstream) is a stream of values that are produced at time intervals. The values form a [sequence](glossary://sequence), but with its values arriving asynchronously — an [AsyncSequence](doc://com.apple.documentation/documentation/swift/asyncsequence). You can do many of the same things you can do with any other sequence of values, such as with an [array](glossary://array).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page8..Paragraph27" = "In this case you use the stream’s [map(_:)](doc://com.apple.documentation/documentation/swift/asyncsequence/3814580-map) function to convert each element — `$0` — into an [Image](doc://com.apple.documentation/documentation/swiftui/image) instance using an `image` property extension of `CIImage`. This transforms the stream of [CIImage](doc://com.apple.documentation/documentation/coreimage/ciimage) instances into a stream of [Image](doc://com.apple.documentation/documentation/swiftui/image) instances.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page9..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page9..Paragraph28" = "Your `for`-`await` loop waits for each image in your transformed `imageStream` before doing something with it.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page9..Paragraph29" = "Learn more about working with asynchronous sequences in the [Swift Programming Language Guide](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/#Asynchronous-Sequences).";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page10..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page10..Paragraph30" = "You use the image from the preview stream to update your data model’s `viewfinderImage` property.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskprocessPreviews..Page10..Paragraph31" = "SwiftUI makes sure that any views using this property get updated when the `viewfinderImage` value changes.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..title" = "Viewing the Preview Stream";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..Paragraph32" = "See how you can connect your viewfinder view to the processed preview stream.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..Page11..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..Page11..Paragraph33" = "Your `CameraView` has a `ViewfinderView` that it uses to display live video from the camera.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..Page12..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..Page12..Paragraph34" = "By [binding](glossary://binding) the the model’s `viewfinderImage` property to your `ViewfinderView`, you ensure that the viewfinder updates whenever the view receives a new preview image.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskviewPreviews..Page12..Paragraph35" = "Because the preview image updates many times per second, your eyes see it as live video in the viewfinder.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..title" = "Rotate or Blur the Viewfinder";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Paragraph36" = "Experiment by rotating or blurring the images in the preview stream.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page13..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page13..Paragraph37" = "Your `handleCameraPreviews` method maps the camera’s preview [stream](glossary://asynchronous%20stream) of [CIImage](doc://com.apple.documentation/documentation/coreimage/ciimage) instances to a stream of [Image](doc://com.apple.documentation/documentation/swiftui/image) views, ready for display in your `ViewfinderView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page13..Paragraph38" = "This is a great place to do other useful things to the preview images before mapping them to an [Image](doc://com.apple.documentation/documentation/swiftui/image) view.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page14..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page14..Paragraph39" = "Say you wanted to turn the image sideways, or even upside down, you could call its [oriented(_:)](doc://com.apple.documentation/documentation/coreimage/ciimage/2919727-oriented) method.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page15..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page15..Paragraph40" = "In the definition for `imageStream`, add this line of code above `.map { $0.image }`:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page15..CodeBlock1" = ".map { $0.oriented(.left) }
";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page15..Paragraph41" = "Here, you’re using `map` to turn a stream of images into a stream of rotated images by calling the function `oriented(.left)` for each element (`$0`) in the stream.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page16..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page16..Paragraph42" = "Or perhaps you’d like to blur the preview images a little?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page16..Paragraph43" = "Apply another operation to the images by adding this code above `.map { $0.image }`:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page16..CodeBlock2" = ".map { $0.applyingGaussianBlur(sigma: 5) }
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page17..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page17..Paragraph44" = "You’re applying one `map` operation after another to the [stream](glossary://asynchronous%20stream), or [chaining](glossary://chaining) the operations. In fact, you can chain as many operations together as you’d like. For example, the following takes the input from the preview stream, rotates the images, blurs them, and finally converts them to a stream of `Image`.";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page17..CodeBlock3" = "let imageStream = camera.previewStream
    .map { $0.oriented(.left) }
    .map { $0.applyingGaussianBlur(sigma: 5) }
    .map { $0.image }
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page18..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page18..Paragraph45" = "Experiment a little!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page18..UnorderedList1..Paragraph46" = "Try different orientation options; for example, what happens when you change the orientation to `.down`?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page18..UnorderedList1..Paragraph47" = "Try different blur values.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup0..TaskpreviewExperiment..Page18..Paragraph48" = "[CIImage](doc://com.apple.documentation/documentation/coreimage/ciimage) has lots of useful methods for transforming images.";

/* Title for the section of tasks to complete */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..title" = "Capturing and Saving a Photo";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..Paragraph49" = "Smile! Click! A lot happens in quick succession when you take a photo. 📸";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..Paragraph50" = "Follow the action after you tap or click the shutter button, to investigate what happens from that moment to when the photo shows up in your photo library.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..title" = "Responding to the Shutter Button";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..Paragraph51" = "Learn how to handle the shutter button action, and request the camera to take a photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..Page19..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..Page19..Paragraph52" = "When you tap or click the shutter button in your camera view, things start happening!";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..Page20..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..Page20..Paragraph53" = "The button springs into action, grabs the model’s `camera` object, then calls its `takePhoto()` method.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskshutterButton..Page20..Paragraph54" = "Keep going to find out how it takes a photo!";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..title" = "Capturing a Photo";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Paragraph55" = "When you take a photo, the camera captures image data from its sensor. Learn how to initiate this, and handle the resulting captured photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page21..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page21..Paragraph56" = "When you take a photo, you want to capture an image with the highest possible resolution. This contrasts with the preview images, which tend to have a lower resolution to facilitate rapidly updating previews in the viewfinder.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page21..Paragraph57" = "Your camera has a special photo output that its `takePhoto()` method uses to capture high-resolution images of what you see in the viewfinder.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page22..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page22..Paragraph58" = "You start the real work of taking the photo by requesting the photo output to capture a photo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page22..Paragraph59" = "If all goes well, this is when you hear a reassuring shutter sound to let you — and anyone nearby — know that you’ve just taken a photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page23..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page23..Paragraph60" = "You might wonder why `capturePhoto` doesn’t just return the photo. That’s because capturing a photo takes time: the camera may need to focus, or wait for the flash, and then there’s the exposure time. The `capturePhoto` method is [asynchronous](glossary://asynchronous%20process), with the captured photo typically arriving a short time after you tap or click the shutter button.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page24..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page24..Paragraph61" = "After the photo capture has completed, you receive a [callback](glossary://callback) to another method in your camera object: `photoOutput(_:didFinishProcessingPhoto:error:)`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page24..Paragraph62" = "Its first argument receives the captured photo as an instance of [AVCapturePhoto](doc://com.apple.documentation/documentation/avfoundation/avcapturephoto/).";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page25..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskcapturePhoto..Page25..Paragraph63" = "Now that you’ve got the captured photo, you add it into the camera’s photo stream. It’s then available to any object in your app waiting for a photo, like the data model.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..title" = "Processing and Saving a Photo";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Paragraph64" = "Discover how to unpack a captured photo and save it to your photo library.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page26..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page26..Paragraph65" = "Your data model is patiently awaiting newly-captured photos.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page26..Paragraph66" = "Just as for preview images, it has a dedicated [task](glossary://task) for handling the captured photo stream from the camera, using its `handleCameraPhotos` method.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page26..Paragraph67" = "You can learn more about [tasks](doc://com.apple.documentation/documentation/swift/task) in the Swift standard library.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page27..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page27..Paragraph68" = "Each [AVCapturePhoto](doc://com.apple.documentation/documentation/avfoundation/avcapturephoto/) element in the camera’s `photoStream` may contain several images at different resolutions, as well as other [metadata](glossary://metadata) about the image, such as its size and the date and time the image was captured. You have to unpack it to get the images and metadata that you want.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page27..Paragraph69" = "The first thing you do in `handleCameraPhotos` is to convert `photoStream` into a more useful `unpackedPhotoStream`, in which each element is an instance of the `PhotoData` structure that contains the data you want.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page28..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page28..Paragraph70" = "To unpack the `photoStream`, you’ll use the `unpackPhoto(_:)` function, which takes a captured photo and returns a `PhotoData` instance that contains:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page28..UnorderedList2..Paragraph71" = "a low-resolution image thumbnail as an [Image](doc://com.apple.documentation/documentation/swiftui/image)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page28..UnorderedList2..Paragraph72" = "the size of the image thumbnail";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page28..UnorderedList2..Paragraph73" = "a high-resolution image as [Data](doc://com.apple.documentation/documentation/foundation/data)";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page28..UnorderedList2..Paragraph74" = "the size of the high-resolution image";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page29..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page29..Paragraph75" = "You’ll recall that, as an [asynchronous stream](glossary://asynchronous%20stream), `photoStream` is very much like a [Sequence](doc://com.apple.documentation/documentation/swift/sequence).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page29..Paragraph76" = "You can use its [compactMap(_:)](doc://com.apple.documentation/documentation/swift/asyncsequence/3814567-compactmap) method to call `unpackPhoto(_:)` for each photo (`$0`) in the stream. This transforms the stream of [AVCapturePhoto](doc://com.apple.documentation/documentation/avfoundation/avcapturephoto/) instances into a much more useful stream of `PhotoData` instances.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page30..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page30..Paragraph77" = "The `for`-`await` loop now waits for a `photoData` element to arrive in your unpacked stream before processing it.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page31..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page31..Paragraph78" = "You use the thumbnail image in `photoData` to update your model’s `thumbnailImage` property.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page32..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page32..Paragraph79" = "Call your model’s `savePhoto(imageData:)` method to save the image data from `photoData` as a new photo in your photo library.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page33..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page33..Paragraph80" = "The `savePhoto(imageData:)` method creates a [task](glossary://task) and passes on the real work of saving the photo data to the `photoCollection` object by calling its `addImage(_:)` method.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskprocessPhoto..Page33..Paragraph81" = "And that’s fine! The data model’s job is to coordinate data flow between the app’s data objects.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..title" = "Add a Delayed Shutter";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Paragraph82" = "Experiment with your camera by adding a delay to its shutter button.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page34..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page34..Paragraph83" = "Imagine setting the camera up somewhere — like on a tripod, tapping or clicking the button, and having enough time to run around and leap into the frame before the photo is taken!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page34..Paragraph84" = "To do that you’ll need to add a short delay after you tap or click the shutter button before the camera takes the photo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page34..Paragraph85" = "Looking at your code for handling the shutter button action, think about how you might implement this.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page35..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page35..Paragraph86" = "You quickly come up with a plan:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page35..OrderedList0..Paragraph87" = "Add a [state property](glossary://state%20value) `delayCount` to count down the seconds until you take the photo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page35..OrderedList0..Paragraph88" = "When you tap or click the shutter button, set `delayCount` to the number of seconds you want the camera to wait before taking the photo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page35..OrderedList0..Paragraph89" = "Schedule a [Timer](doc://com.apple.documentation/documentation/foundation/timer) to [decrement](glossary://decrement) `delayCount` once per second.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page35..OrderedList0..Paragraph90" = "When `delayCount` reaches zero, stop the timer, and simultaneously tell the camera to take a photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page36..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page36..Paragraph91" = "First define the [state property](glossary://state%20value) `delayCount` at the top of `CameraView`, above its `body` property, setting its initial value to zero.";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page36..CodeBlock4" = "@State private var delayCount = 0
";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page36..Paragraph92" = "Tip: Keep it `private` because you’re only using it inside `CameraView`. This is a good practice for any definition that you only plan to use within a type.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page37..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page37..Paragraph93" = "Then, in your shutter [Button](doc://com.apple.documentation/documentation/swiftui/button) handler, [comment out](glossary://comment%20out) the line of code that immediately takes a photo when you tap or click the button.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page37..Paragraph94" = "You’ll call `takePhoto()` inside your timer handler instead.";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page37..CodeBlock5" = "Button {
    // model.camera.takePhoto()
}
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page38..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page38..Paragraph95" = "Next set your `delayCount` variable to the number of seconds you want to count down, like `5` seconds.";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page38..CodeBlock6" = "// model.camera.takePhoto()
delayCount = 5
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page39..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page39..Paragraph96" = "Below your `delayCount` assignment, add a scheduled [Timer](doc://com.apple.documentation/documentation/foundation/timer) to repeat once per second. When your timer goes off, it calls the code in the [closure](glossary://closure) that you provide for it, [decrementing](glossary://decrement) `delayCount`.";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page39..CodeBlock7" = "Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
    delayCount -= 1
}
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page40..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page40..Paragraph97" = "And now for the final step in your timer closure: when `delayCount` reaches zero, stop the timer and instruct the camera to take the photo.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page40..Paragraph98" = "Add the following code in your timer closure, after `delayCount -= 1`:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page40..CodeBlock8" = "if delayCount == 0 {
    timer.invalidate()
    model.camera.takePhoto()
}
";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page40..Paragraph99" = "When you call the timer’s [invalidate](doc://com.apple.documentation/documentation/foundation/timer/1415405-invalidate) method, it stops — its job is done!";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page41..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page41..Paragraph100" = "Your button handler should now look like the code below.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page41..Paragraph101" = "After checking your code carefully, tap or click the shutter button and wait!";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page41..CodeBlock9" = "Button {
    // model.camera.takePhoto()
    delayCount = 5
    Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
        delayCount -= 1
        if delayCount == 0 {
            timer.invalidate()
            model.camera.takePhoto()
        }
    }
}
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page42..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page42..Paragraph102" = "Tip: Do you sometimes wonder what’s really going on in your code, especially if it isn’t doing what you expect?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page42..Paragraph103" = "You can add a `print` statement to have your code tell you exactly what it’s doing by writing useful information to the [console](glossary://console).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page42..Paragraph104" = "Try adding this line inside your timer closure:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page42..CodeBlock10" = "print(\"Timer \\(delayCount) \\(Date.now)\")
";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page42..Paragraph105" = "Open the console, and then tap or click the shutter button to take a delayed photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page43..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page43..Paragraph106" = "Aren’t you so delighted with your delayed shutter button? Well, why not add a little polish! ✨ You could have the countdown displayed right there in the button!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page43..Paragraph107" = "Find the icon for the shutter button: a [ZStack](doc://com.apple.documentation/documentation/swiftui/zstack) with its two [Circle](doc://com.apple.documentation/documentation/swiftui/circle) views. Inside the [ZStack](doc://com.apple.documentation/documentation/swiftui/zstack), and after the second [Circle](doc://com.apple.documentation/documentation/swiftui/circle), add this code:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page43..CodeBlock11" = "if delayCount > 0 {
    Text(\"\\(delayCount)\")
}
";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup1..TaskdelayedShutter..Page43..Paragraph108" = "Now tap or click the shutter button. Watch it count down the seconds before taking the photo.";

/* Title for the section of tasks to complete */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..title" = "Browsing Your Photos";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..Paragraph109" = "Enjoy taking photos? Most of us do, and it’s easy to end up with hundreds or thousands of photos in your library. 🏞";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..Paragraph110" = "Follow your photos as they’re retrieved from your photo library and displayed in a scrolling gallery you can browse.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..title" = "Using the Photo Collection";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Paragraph111" = "Learn about the photo collection in your data model and how it provides the photos for your gallery.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Page44..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Page44..Paragraph112" = "Your data model has a `photoCollection` property that can represent any collection of items in your photo library. This could be your entire photo library, or just one album, or even the results from a search.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Page44..Paragraph113" = "You can include all of your photos in your library by initializing `photoCollection` with a Smart Album `.smartAlbumUserLibrary`.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Page45..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Page45..Paragraph114" = "Note that before accessing the photo library in your own project, you must add the Photo Library capability.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskdataModelPhotoCollection..Page45..Paragraph115" = "Find out more more in [Requesting access to capabilities for your project](https://developer.apple.com/documentation/swift-playgrounds/project-capabilities).";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..title" = "Fetching the Photo Assets";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Paragraph116" = "Each item in your photo collection is known as a photo [asset](glossary://asset). Find out how to fetch those assets.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page46..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page46..Paragraph117" = "Your data model’s `photoCollection` has a `photoAssets` property that enables use of the photo assets collection just like you would an array.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page47..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page47..Paragraph118" = "For example, you can fetch a photo asset using its index:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page47..CodeBlock12" = "let asset = photoCollection.photoAssets[4]
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page48..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page48..Paragraph119" = "Or count all of the photos in your collection:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page48..CodeBlock13" = "let count = photoCollection.photoAssets.count
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page49..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page49..Paragraph120" = "You can also [iterate over](glossary://iteration) the assets in `photoAssets` using a loop. You’ll find this incredibly useful for building your gallery.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page50..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoAssets..Page50..Paragraph121" = "You’ll notice that `photoAssets` is a [published](glossary://published%20value) property of `PhotoCollection`, which is an [observable object](glossary://observable%20object). This means that you can respond to changes in the photo assets, such as when photos are added or deleted.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..title" = "Navigating to the Photo Gallery";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Paragraph122" = "Find out how to navigate to the photo gallery and connect it to your photo library.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page51..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page51..Paragraph123" = "In your camera view, use a [navigation link](glossary://navigation%20link) to take you to your photo gallery.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page51..Paragraph124" = "A navigation link is just like a button — you can even give it a label and an icon. You place this button to the left of the shutter button.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page52..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page52..Paragraph125" = "When you tap or click a navigation link, SwiftUI takes you to another view — in this case, the photo collection view — that you use to display your photo gallery.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page52..Paragraph126" = "If you use navigation links within a [NavigationStack](doc://com.apple.documentation/documentation/swiftui/navigationstack), SwiftUI manages the presentation of your views so you can easily navigate between them.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page53..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page53..Paragraph127" = "By passing your model’s `photoCollection` to the `PhotoCollectionView` when you initialize it, you provide the collection of photos that you want to display in your gallery.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page54..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page54..Paragraph128" = "When you open the gallery, you’ll no longer see the viewfinder, so there’s no need to keep updating it. Instead, you’d rather concentrate the device’s performance on displaying your photos.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TasknavigateToGallery..Page54..Paragraph129" = "To control when the camera’s preview stream is active, use the navigation link’s [onAppear(perform:)](doc://com.apple.documentation/documentation/swiftui/view/onappear(perform:)) modifier to pause it when the gallery appears, and [onDisappear(perform:)](doc://com.apple.documentation/documentation/swiftui/view/ondisappear(perform:)) to resume it again when you navigate back to the camera.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..title" = "Building the Photo Gallery";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Paragraph130" = "Discover how to display your photos in a scrolling grid.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page55..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page55..Paragraph131" = "You use a `PhotoCollectionView` to display your photos in a scrolling grid, with the most recent photos at the top.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page56..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page56..Paragraph132" = "When you create your `PhotoCollectionView`, the `photoCollection` property initializes with a reference to your model’s `photoCollection`. It provides all of the data you need to build your photo gallery.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page56..Paragraph133" = "By making `photoCollection` an [observed object](glossary://observed%20object), SwiftUI updates your photo collection view in response to changes in the collection’s [published values](glossary://published%20value).";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page57..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page57..Paragraph134" = "You use a lazy vertical grid ([LazyVGrid](doc://com.apple.documentation/documentation/swiftui/lazyvgrid)) to display your photos as items in a grid layout. Because the layout uses a vertical grid, you only need to decide how many `columns` you want and the `spacing` between each item. After the grid has the number of columns, it expands vertically to add enough rows for displaying all of your photos.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page57..Paragraph135" = "Why lazy? Well, if the grid is larger than its containing view, the view only displays the items that are currently visible. This “laziness” actually enhances the performance of your app, especially as you scroll through the grid of photos.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page58..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page58..Paragraph136" = "You could use a fixed number of columns in your grid, but a more [responsive](glossary://responsive) approach is to display as many columns as you can, depending on the width of the view. This creates a much better experience as people resize your app.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page58..Paragraph137" = "To create a grid that adapts to the width of your view, define an `adaptive` [GridItem](doc://com.apple.documentation/documentation/swiftui/griditem) and specify the size and spacing you want it to maintain.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page59..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page59..Paragraph138" = "Imagine having hundreds — or thousands — of photos. Even with adaptive layout, your grid can get very tall — way taller than the space you have to display it!";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page59..Paragraph139" = "Make your grid scrollable by placing it inside a [ScrollView](doc://com.apple.documentation/documentation/swiftui/scrollview). This makes it so your grid can have as many rows as it needs, and you’ll be able to scroll up and down through your photos.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page60..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page60..Paragraph140" = "Inside your grid, use [ForEach](doc://com.apple.documentation/documentation/swiftui/foreach) to [iterate](glossary://iteration) over the photo assets in your collection and generate a view for each asset — these views populate your grid.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page60..Paragraph141" = "Because your grid is lazy, as you scroll, [ForEach](doc://com.apple.documentation/documentation/swiftui/foreach) only operates on the visible photo assets.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page61..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page61..Paragraph142" = "Create a [NavigationLink](doc://com.apple.documentation/documentation/swiftui/navigationlink) for each grid item that, when tapped or clicked, displays the individual photo at full size using the [destination](glossary://destination%20view) `PhotoView` initialized with the photo asset.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page62..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page62..Paragraph143" = "The `photoItemView(asset:)` method creates a view that displays a small image thumbnail for a photo asset.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoCollectionView..Page62..Paragraph144" = "You’ll use this view as the [label](glossary://label) for the navigation link, displaying each link as a thumbnail-sized image of the photo.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..title" = "Displaying a Photo";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Paragraph145" = "Learn how the photo view loads and displays your photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page63..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page63..Paragraph146" = "When it comes to displaying a photo on its own, you’ll use `PhotoView`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page63..Paragraph147" = "In your photo view, you display a high-resolution image that you request from the photo. You also have an overlay with buttons for favoriting or deleting the photo.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page64..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page64..Paragraph148" = "Your photo view has a `photoAsset` property for the photo it displays. You pass this in when you initialize the `PhotoView`.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page65..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page65..Paragraph149" = "You also initialize the view with a `cache` property that holds a reference to your image cache.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page65..Paragraph150" = "You can request an image of a specified size from the image cache. After loading the image from the photo asset, the cache delivers it back to you. The image cache also keeps recently-requested images in memory, so it doesn’t have to reload them if you request them again.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page66..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page66..Paragraph151" = "Your view has an `image` [state property](glossary://state%20value) ready to hold the image after loading it.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page66..Paragraph152" = "It’s an [optional](glossary://optional) type — `Image?` — because you want it to start off without any value.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page67..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page67..Paragraph153" = "A view can use its [task(priority:_:)](doc://com.apple.documentation/documentation/swiftui/view/task(priority:_:)) modifier to run some code [asynchronously](glossary://asynchronous%20process) whenever the view loads.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page68..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page68..Paragraph154" = "This is where you add code to request a high-resolution image from the cache for the photo asset, specifying the size you want.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page68..Paragraph155" = "You also provide the cache with a [closure](glossary://closure) that contains code it can call when it has a `result`.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page69..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page69..Paragraph156" = "Your result closure receives one or more calls from the cache. If the cache already contains the image you requested, it immediately calls your closure with the image in its `result`.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page69..Paragraph157" = "If the cache doesn’t have the requested image, then it loads the image from the photo asset and caches it. While loading the image, the cache may first call your closure with a low-resolution image, before finally delivering the high-resolution image in the `result`.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page70..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page70..Paragraph158" = "Your result closure looks for an image in the result. If it finds one, it updates your `image` property.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page71..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page71..Paragraph159" = "Because you’ve made `image` a state property, SwiftUI updates your view when its value changes.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page71..Paragraph160" = "If `image` contains a value, you [unwrap](glossary://unwrap) the image and display it in your view.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page72..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page72..Paragraph161" = "However, if `image` doesn’t have a value, you use a [ProgressView](doc://com.apple.documentation/documentation/swiftui/progressview) to display a spinner as a [placeholder](glossary://placeholder%20view).";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskphotoView..Page72..Paragraph162" = "Look very carefully, and you might just see this spinner when your view first loads, before the cache has a chance to load an image from the photo asset.";

/* Title for task */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..title" = "Use a Fixed Grid";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Paragraph163" = "Experiment with alternative grid styles in your photo gallery.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page73..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page73..Paragraph164" = "Your gallery displays photos in a grid, with each photo in a fixed-size square.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page73..Paragraph165" = "You define this arrangement using the `columns` property which returns an array of [GridItem](doc://com.apple.documentation/documentation/swiftui/griditem). Using a single [adaptive(minimum:maximum:)](doc://com.apple.documentation/documentation/swiftui/griditem/size-swift.enum/adaptive(minimum:maximum:)) grid item means that your `LazyVGrid` adapts to the available width, fitting in as many columns as it can.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page74..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page74..Paragraph166" = "But say you wanted a fixed number of columns instead, with each photo taking up as much space as possible?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page74..Paragraph167" = "To do this, your `columns` array should instead contain a [flexible(minimum:maximum:)](doc://com.apple.documentation/documentation/swiftui/griditem/size-swift.enum/flexible(minimum:maximum:)) grid item for each column that you want.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page75..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page75..Paragraph168" = "Below `columns`, define a `fixedColumns` property that returns an array of `flexible` grid items, one for each column:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page75..CodeBlock14" = "let fixedColumns = [ 
    GridItem(.flexible(), spacing: itemSpacing),
    GridItem(.flexible(), spacing: itemSpacing)
]
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page76..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page76..Paragraph169" = "And, instead of `columns`, pass `fixedColumns` to your lazy grid like this:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page76..CodeBlock15" = "LazyVGrid(columns: fixedColumns, spacing: Self.itemSpacing)
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page77..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page77..Paragraph170" = "Now browse to your photo gallery and see what difference this makes, especially when you resize the view.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page77..Paragraph171" = "You’ll notice that there are now two columns as you expect, but the photos are still the original size.";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page78..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page78..Paragraph172" = "You’ve one more thing to take care of…";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page78..Paragraph173" = "Look at this line of code in the function that builds your photo item view. Take a moment to think about what the problem might be?";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page79..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page79..Paragraph174" = "Yes, you no longer want a fixed [frame](doc://com.apple.documentation/documentation/swiftui/view/frame(width:height:alignment:)) size for each photo. Instead, the width of the view and the number of columns in the grid determine the image size.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page79..Paragraph175" = "Comment out the following line, as shown, so that each photo is free to occupy as much space as possible:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page79..CodeBlock16" = "// .frame(width: Self.itemSize.width, height: Self.itemSize.height)
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page80..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page80..Paragraph176" = "Open your photo gallery again and you’ll see that each photo now fills the column width.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page80..Paragraph177" = "Try making your view wider. What do you notice happens?";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page81..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page81..Paragraph178" = "Look carefully at your new fixed columns and you’ll notice that they have space between them, but none on either side. Looking at the code, can you see why?";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page81..Paragraph179" = "Change the view’s padding so it’s all around instead of just vertical:";

/*  */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page81..CodeBlock17" = ".padding(Self.itemSpacing)
";

/* title for page */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page82..title" = "";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page82..Paragraph180" = "Some further things to try:";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page82..UnorderedList3..Paragraph181" = "Add more grid items for additional columns.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page82..UnorderedList3..Paragraph182" = "Change the value returned by your `imageSize` property to obtain higher-resolution images for your fixed grid.";

/* Paragraph Content delivered to the user. The key should give context as to where this is being delivered to the user */
"GuideBook..Guide0..StepCapturing Photos..TaskGroup2..TaskfixedGrid..Page82..UnorderedList3..Paragraph183" = "Use a maximum height for your photo item view instead of a fixed height: `.frame(maxHeight: 400)`.";

